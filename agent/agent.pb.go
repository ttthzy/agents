// Code generated by protoc-gen-go.
// source: agent.proto
// DO NOT EDIT!

/*
Package agent is a generated protocol buffer package.

It is generated from these files:
	agent.proto

It has these top-level messages:
	HelloRequest
	HelloReply
	Address
	ConnectRequest
	ConnectReply
	DataPacket
	Ping
	Pong
*/
package agent

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type HelloRequest struct {
	Major uint32 `protobuf:"varint,1,opt,name=major" json:"major,omitempty"`
	Minor uint32 `protobuf:"varint,2,opt,name=minor" json:"minor,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HelloReply struct {
	Major   uint32 `protobuf:"varint,1,opt,name=major" json:"major,omitempty"`
	Minor   uint32 `protobuf:"varint,2,opt,name=minor" json:"minor,omitempty"`
	Session string `protobuf:"bytes,3,opt,name=session" json:"session,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Address struct {
	Network string `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// metadata: session
type ConnectRequest struct {
	Remote *Address `protobuf:"bytes,1,opt,name=remote" json:"remote,omitempty"`
}

func (m *ConnectRequest) Reset()                    { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string            { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()               {}
func (*ConnectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ConnectRequest) GetRemote() *Address {
	if m != nil {
		return m.Remote
	}
	return nil
}

type ConnectReply struct {
	Channel string   `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Bound   *Address `protobuf:"bytes,2,opt,name=bound" json:"bound,omitempty"`
}

func (m *ConnectReply) Reset()                    { *m = ConnectReply{} }
func (m *ConnectReply) String() string            { return proto.CompactTextString(m) }
func (*ConnectReply) ProtoMessage()               {}
func (*ConnectReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ConnectReply) GetBound() *Address {
	if m != nil {
		return m.Bound
	}
	return nil
}

// metadata: session, channel
type DataPacket struct {
	No   uint32   `protobuf:"varint,1,opt,name=No,json=no" json:"No,omitempty"`
	Buf  []byte   `protobuf:"bytes,2,opt,name=buf,proto3" json:"buf,omitempty"`
	Acks []uint32 `protobuf:"varint,4,rep,name=acks" json:"acks,omitempty"`
}

func (m *DataPacket) Reset()                    { *m = DataPacket{} }
func (m *DataPacket) String() string            { return proto.CompactTextString(m) }
func (*DataPacket) ProtoMessage()               {}
func (*DataPacket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// metadata: session
type Ping struct {
	AppData string `protobuf:"bytes,1,opt,name=appData" json:"appData,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Pong struct {
	AppData string `protobuf:"bytes,1,opt,name=appData" json:"appData,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*HelloRequest)(nil), "agent.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "agent.HelloReply")
	proto.RegisterType((*Address)(nil), "agent.Address")
	proto.RegisterType((*ConnectRequest)(nil), "agent.ConnectRequest")
	proto.RegisterType((*ConnectReply)(nil), "agent.ConnectReply")
	proto.RegisterType((*DataPacket)(nil), "agent.DataPacket")
	proto.RegisterType((*Ping)(nil), "agent.Ping")
	proto.RegisterType((*Pong)(nil), "agent.Pong")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Agent service

type AgentClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectReply, error)
	Exchange(ctx context.Context, opts ...grpc.CallOption) (Agent_ExchangeClient, error)
	Heartbeat(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
}

type agentClient struct {
	cc *grpc.ClientConn
}

func NewAgentClient(cc *grpc.ClientConn) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/agent.Agent/Hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectReply, error) {
	out := new(ConnectReply)
	err := grpc.Invoke(ctx, "/agent.Agent/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Exchange(ctx context.Context, opts ...grpc.CallOption) (Agent_ExchangeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Agent_serviceDesc.Streams[0], c.cc, "/agent.Agent/Exchange", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentExchangeClient{stream}
	return x, nil
}

type Agent_ExchangeClient interface {
	Send(*DataPacket) error
	Recv() (*DataPacket, error)
	grpc.ClientStream
}

type agentExchangeClient struct {
	grpc.ClientStream
}

func (x *agentExchangeClient) Send(m *DataPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentExchangeClient) Recv() (*DataPacket, error) {
	m := new(DataPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) Heartbeat(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := grpc.Invoke(ctx, "/agent.Agent/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Agent service

type AgentServer interface {
	Hello(context.Context, *HelloRequest) (*HelloReply, error)
	Connect(context.Context, *ConnectRequest) (*ConnectReply, error)
	Exchange(Agent_ExchangeServer) error
	Heartbeat(context.Context, *Ping) (*Pong, error)
}

func RegisterAgentServer(s *grpc.Server, srv AgentServer) {
	s.RegisterService(&_Agent_serviceDesc, srv)
}

func _Agent_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AgentServer).Hello(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Agent_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AgentServer).Connect(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Agent_Exchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).Exchange(&agentExchangeServer{stream})
}

type Agent_ExchangeServer interface {
	Send(*DataPacket) error
	Recv() (*DataPacket, error)
	grpc.ServerStream
}

type agentExchangeServer struct {
	grpc.ServerStream
}

func (x *agentExchangeServer) Send(m *DataPacket) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentExchangeServer) Recv() (*DataPacket, error) {
	m := new(DataPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Agent_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AgentServer).Heartbeat(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Agent_Hello_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _Agent_Connect_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Agent_Heartbeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exchange",
			Handler:       _Agent_Exchange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x52, 0xdd, 0x4e, 0xf2, 0x40,
	0x10, 0xa5, 0x40, 0xe1, 0x63, 0xe0, 0x23, 0x3a, 0x68, 0xd2, 0xf4, 0x8a, 0x6c, 0x8c, 0x72, 0x45,
	0x14, 0x13, 0x35, 0x26, 0x5e, 0xe0, 0x4f, 0xc2, 0x15, 0x21, 0x7d, 0x83, 0x2d, 0xac, 0x88, 0x94,
	0xdd, 0xba, 0x5d, 0xa2, 0xbe, 0xa7, 0x0f, 0xe4, 0xee, 0x76, 0x8b, 0x22, 0x89, 0x89, 0x77, 0x3d,
	0x67, 0xce, 0x9c, 0x99, 0x39, 0x5b, 0x68, 0xd2, 0x39, 0xe3, 0xaa, 0x9f, 0x4a, 0xa1, 0x04, 0xfa,
	0x16, 0x90, 0x6b, 0x68, 0x8d, 0x58, 0x92, 0x88, 0x88, 0xbd, 0xac, 0x59, 0xa6, 0xf0, 0x00, 0xfc,
	0x15, 0x7d, 0x16, 0x32, 0xf0, 0xba, 0x5e, 0xef, 0x7f, 0x94, 0x03, 0xcb, 0x2e, 0xb8, 0x66, 0xcb,
	0x8e, 0x35, 0x80, 0x44, 0x00, 0xae, 0x37, 0x4d, 0xde, 0xff, 0xd2, 0x89, 0x01, 0xd4, 0x33, 0x96,
	0x65, 0x0b, 0xc1, 0x83, 0x8a, 0xe6, 0x1b, 0x51, 0x01, 0xc9, 0x0d, 0xd4, 0x87, 0xb3, 0x99, 0xd4,
	0xc8, 0x88, 0x38, 0x53, 0xaf, 0x42, 0x2e, 0xad, 0xa5, 0x16, 0x39, 0x68, 0x2a, 0x34, 0x17, 0x59,
	0x5b, 0x5d, 0x71, 0x90, 0x5c, 0x41, 0xfb, 0x4e, 0x70, 0xce, 0xa6, 0xaa, 0x38, 0xe8, 0x18, 0x6a,
	0x92, 0xad, 0x84, 0x62, 0xd6, 0xa4, 0x39, 0x68, 0xf7, 0xf3, 0x14, 0xdc, 0x94, 0xc8, 0x55, 0xc9,
	0x18, 0x5a, 0x9b, 0x4e, 0x73, 0x8e, 0x9e, 0x31, 0x7d, 0xa2, 0x9a, 0x48, 0x8a, 0xe9, 0x0e, 0xe2,
	0x11, 0xf8, 0xb1, 0x58, 0xf3, 0x99, 0x9d, 0xbd, 0x6b, 0x98, 0x17, 0xc9, 0x2d, 0xc0, 0x3d, 0x55,
	0x74, 0x42, 0xa7, 0x4b, 0xa6, 0xb0, 0x0d, 0xe5, 0xb1, 0x70, 0xc9, 0x94, 0xb9, 0xc0, 0x3d, 0xa8,
	0xc4, 0xeb, 0x47, 0xeb, 0xd0, 0x8a, 0xcc, 0x27, 0x22, 0x54, 0xb5, 0x34, 0x0b, 0xaa, 0xdd, 0x8a,
	0xd6, 0xd8, 0x6f, 0xd2, 0x85, 0xea, 0x64, 0xc1, 0xe7, 0xf6, 0xde, 0x34, 0x35, 0x76, 0xc5, 0x2e,
	0x0e, 0x5a, 0x85, 0xf8, 0x4d, 0x31, 0xf8, 0xf0, 0xc0, 0x1f, 0x9a, 0x05, 0xf1, 0x0c, 0x7c, 0xfb,
	0x5c, 0xd8, 0x71, 0x1b, 0x7f, 0x7f, 0xf8, 0x70, 0x7f, 0x9b, 0xd4, 0x11, 0x90, 0x12, 0x5e, 0x42,
	0xdd, 0x85, 0x82, 0x87, 0xae, 0xbe, 0x1d, 0x6f, 0xd8, 0xf9, 0x49, 0xe7, 0x8d, 0x17, 0xf0, 0xef,
	0xe1, 0xcd, 0x04, 0x36, 0x67, 0x58, 0x38, 0x7f, 0xc5, 0x11, 0xee, 0x52, 0xa4, 0xd4, 0xf3, 0x4e,
	0x3d, 0x3c, 0x81, 0xc6, 0x88, 0x51, 0xa9, 0x62, 0x46, 0x15, 0x36, 0x9d, 0xca, 0x64, 0x10, 0x6e,
	0x80, 0x3e, 0x97, 0x94, 0xe2, 0x9a, 0xfd, 0x8b, 0xcf, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x19,
	0x2e, 0x69, 0xe7, 0xd4, 0x02, 0x00, 0x00,
}
